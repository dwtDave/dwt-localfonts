#!/bin/bash

# DWT LocalFonts - Pre-commit Git Hook
# This script runs quick checks on staged files before committing
# For comprehensive testing, see pre-push hook

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the plugin directory
PLUGIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
cd "$PLUGIN_DIR"

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}🔍 Running pre-commit validation checks...${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Track if any checks fail
FAILED=0

# Function to print step header
print_step() {
    echo -e "${BLUE}▶ $1${NC}"
}

# Function to print success
print_success() {
    echo -e "${GREEN}✓ $1${NC}"
    echo ""
}

# Function to print error
print_error() {
    echo -e "${RED}✗ $1${NC}"
    echo ""
    FAILED=1
}

# Function to print warning
print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
    echo ""
}

# 1. Check for staged files
print_step "Checking for staged changes..."
if ! git diff --cached --quiet; then
    print_success "Staged changes detected"
else
    print_warning "No staged changes found. Nothing to validate."
    exit 0
fi

# Get list of staged PHP files
STAGED_PHP_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep "\.php$" || true)
STAGED_JS_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E "\.(js|jsx|ts|tsx)$" || true)

# 2. Check PHP syntax errors
if [ -n "$STAGED_PHP_FILES" ]; then
    print_step "Checking PHP syntax errors in staged files..."
    SYNTAX_ERROR=0

    while IFS= read -r file; do
        if [ -f "$file" ]; then
            if ! php -l "$file" > /dev/null 2>&1; then
                echo -e "${RED}Syntax error in: $file${NC}"
                SYNTAX_ERROR=1
            fi
        fi
    done <<< "$STAGED_PHP_FILES"

    if [ $SYNTAX_ERROR -eq 0 ]; then
        print_success "No PHP syntax errors"
    else
        print_error "PHP syntax errors detected"
    fi
fi

# 3. Auto-fix PHP coding standards on staged files
if [ -n "$STAGED_PHP_FILES" ]; then
    print_step "Auto-fixing PHP coding standards (PHPCBF)..."

    # Create temporary file list
    TEMP_FILE=$(mktemp)
    echo "$STAGED_PHP_FILES" > "$TEMP_FILE"

    # Run phpcbf on staged files only
    if vendor/bin/phpcbf --file-list="$TEMP_FILE" --standard=phpcs.xml.dist 2>/dev/null || true; then
        print_success "PHP coding standards auto-fixed (re-stage any modified files)"
    fi

    rm -f "$TEMP_FILE"

    # Check if there are still issues
    print_step "Checking PHP coding standards (PHPCS)..."
    if vendor/bin/phpcs --file-list=<(echo "$STAGED_PHP_FILES") --standard=phpcs.xml.dist; then
        print_success "PHP coding standards check passed"
    else
        print_error "PHP coding standards violations remain (some can't be auto-fixed)"
    fi
fi

# 4. Check for var_dump, console.log, debugger statements
print_step "Checking for debug statements..."
DEBUG_FOUND=0

if [ -n "$STAGED_PHP_FILES" ]; then
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            if grep -nE "(var_dump|print_r\(|error_log\(|var_export\()" "$file" | grep -v "// phpcs:ignore\|// nosemgrep\|@codingStandardsIgnoreLine"; then
                echo -e "${YELLOW}Debug statement found in: $file${NC}"
                DEBUG_FOUND=1
            fi
        fi
    done <<< "$STAGED_PHP_FILES"
fi

if [ -n "$STAGED_JS_FILES" ]; then
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            if grep -nE "(console\.(log|debug|info|warn)|debugger)" "$file" | grep -v "// eslint-disable-next-line\|// @ts-ignore"; then
                echo -e "${YELLOW}Debug statement found in: $file${NC}"
                DEBUG_FOUND=1
            fi
        fi
    done <<< "$STAGED_JS_FILES"
fi

if [ $DEBUG_FOUND -eq 0 ]; then
    print_success "No debug statements detected"
else
    print_warning "Debug statements detected (review before committing)"
fi

# 5. Check for TODO/FIXME comments being added
print_step "Checking for new TODO/FIXME comments..."
TODO_COUNT=$(git diff --cached | grep -c "^+.*\(TODO\|FIXME\|XXX\)" || true)

if [ "$TODO_COUNT" -gt 0 ]; then
    print_warning "$TODO_COUNT new TODO/FIXME comment(s) added"
else
    print_success "No new TODO/FIXME comments"
fi

# 6. Check file sizes
print_step "Checking file sizes..."
LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACMR | while read -r file; do
    if [ -f "$file" ]; then
        SIZE=$(wc -c < "$file" | tr -d ' ')
        if [ "$SIZE" -gt 1048576 ]; then  # 1MB
            echo "$file ($(numfmt --to=iec-i --suffix=B $SIZE 2>/dev/null || echo "$SIZE bytes"))"
        fi
    fi
done)

if [ -n "$LARGE_FILES" ]; then
    print_warning "Large files detected (>1MB):\n$LARGE_FILES"
else
    print_success "No large files detected"
fi

# 7. Check for sensitive data patterns
print_step "Scanning for potential sensitive data..."
SENSITIVE_FOUND=0

ALL_STAGED=$(git diff --cached --name-only --diff-filter=ACMR)
while IFS= read -r file; do
    if [ -f "$file" ]; then
        # Check for potential secrets (basic patterns)
        if grep -nEi "(password|secret|api[_-]?key|access[_-]?token|private[_-]?key)\s*[:=]\s*['\"][^'\"]+['\"]" "$file" | grep -v "password_hash\|wp_hash_password\|// nosemgrep"; then
            echo -e "${RED}Potential sensitive data in: $file${NC}"
            SENSITIVE_FOUND=1
        fi
    fi
done <<< "$ALL_STAGED"

if [ $SENSITIVE_FOUND -eq 0 ]; then
    print_success "No sensitive data patterns detected"
else
    print_error "Potential sensitive data detected - review carefully!"
fi

# 8. Validate JSON files
print_step "Validating JSON files..."
STAGED_JSON=$(git diff --cached --name-only --diff-filter=ACMR | grep "\.json$" || true)

if [ -n "$STAGED_JSON" ]; then
    JSON_ERROR=0
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
                echo -e "${RED}Invalid JSON in: $file${NC}"
                JSON_ERROR=1
            fi
        fi
    done <<< "$STAGED_JSON"

    if [ $JSON_ERROR -eq 0 ]; then
        print_success "All JSON files are valid"
    else
        print_error "Invalid JSON files detected"
    fi
else
    print_success "No JSON files to validate"
fi

# 9. TypeScript type check for staged TypeScript files
if [ -n "$STAGED_JS_FILES" ] && echo "$STAGED_JS_FILES" | grep -qE "\.(ts|tsx)$"; then
    if [ -f "tsconfig.json" ] && [ -d "node_modules" ]; then
        print_step "Running TypeScript type check on staged files..."
        if npx tsc --noEmit > /dev/null 2>&1; then
            print_success "TypeScript type check passed"
        else
            print_warning "TypeScript type check failed (see 'npx tsc --noEmit' for details)"
        fi
    fi
fi

# 10. Final result
echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}✓ All pre-commit checks passed! Proceeding with commit.${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    exit 0
else
    echo -e "${RED}✗ Pre-commit checks failed!${NC}"
    echo -e "${RED}Please fix the issues above before committing.${NC}"
    echo ""
    echo -e "${YELLOW}Quick fixes:${NC}"
    echo -e "  • Re-stage auto-fixed files: ${BLUE}git add -u${NC}"
    echo -e "  • Fix remaining issues: Review output above"
    echo -e "  • Skip hook (not recommended): ${BLUE}git commit --no-verify${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    exit 1
fi
