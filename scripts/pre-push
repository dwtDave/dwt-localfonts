#!/bin/bash

# DWT LocalFonts - Pre-push Git Hook
# This script runs before code is pushed to ensure code quality standards are met

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the plugin directory
PLUGIN_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PLUGIN_DIR"

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}🔍 Running pre-push validation checks...${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Track if any checks fail
FAILED=0

# Function to print step header
print_step() {
    echo -e "${BLUE}▶ $1${NC}"
}

# Function to print success
print_success() {
    echo -e "${GREEN}✓ $1${NC}"
    echo ""
}

# Function to print error
print_error() {
    echo -e "${RED}✗ $1${NC}"
    echo ""
    FAILED=1
}

# Function to print warning
print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
    echo ""
}

# 1. Check for staged files
print_step "Checking for staged changes..."
if ! git diff --cached --quiet; then
    print_success "Staged changes detected"
else
    print_warning "No staged changes found. Nothing to validate."
    exit 0
fi

# 2. Validate composer.json
print_step "Validating composer.json..."
if composer validate --strict --no-check-all; then
    print_success "composer.json is valid"
else
    print_error "composer.json validation failed"
fi

# 3. Run PHP CodeSniffer (PHPCS)
print_step "Running PHP CodeSniffer (WordPress Coding Standards)..."
if composer lint; then
    print_success "PHP coding standards check passed"
else
    print_error "PHP coding standards check failed. Run 'composer lint-fix' to auto-fix issues."
fi

# 4. Run PHPStan Static Analysis
print_step "Running PHPStan static analysis (Level 6)..."
if vendor/bin/phpstan analyze --no-progress --memory-limit=1G; then
    print_success "PHPStan analysis passed"
else
    print_error "PHPStan analysis failed. Fix type errors before pushing."
fi

# 5. Run PHP Unit Tests
print_step "Running PHP unit tests..."
if composer test:unit; then
    print_success "PHP unit tests passed"
else
    print_error "PHP unit tests failed. Fix failing tests before pushing."
fi

# 6. Check for JavaScript/TypeScript if admin files changed
if git diff --cached --name-only | grep -q "admin/"; then
    print_step "Admin files changed - running JavaScript checks..."

    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        print_warning "node_modules not found. Run 'npm install' first."
    else
        # Run TypeScript type checking
        print_step "Running TypeScript type check..."
        if npx tsc --noEmit; then
            print_success "TypeScript type check passed"
        else
            print_error "TypeScript type check failed"
        fi

        # Run Vitest tests
        print_step "Running JavaScript tests..."
        if npm run test:run; then
            print_success "JavaScript tests passed"
        else
            print_error "JavaScript tests failed"
        fi

        # Verify build works
        print_step "Verifying production build..."
        if npm run build; then
            print_success "Production build successful"
        else
            print_error "Production build failed"
        fi
    fi
fi

# 7. Check for security issues
print_step "Running security checks..."

# Composer audit
if composer audit --no-dev 2>&1 | grep -q "Found 0 security"; then
    print_success "No security vulnerabilities in dependencies"
else
    print_warning "Security vulnerabilities detected in dependencies. Review 'composer audit' output."
fi

# Check for dangerous functions
if grep -rn "eval\|exec\|system\|passthru\|shell_exec" src/ dwt-localfonts.php uninstall.php --include="*.php" 2>/dev/null; then
    print_error "Dangerous functions detected in code"
else
    print_success "No dangerous functions detected"
fi

# 8. Final result
echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}✓ All pre-push checks passed! Safe to push.${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    exit 0
else
    echo -e "${RED}✗ Pre-push checks failed!${NC}"
    echo -e "${RED}Please fix the issues above before pushing.${NC}"
    echo ""
    echo -e "${YELLOW}Quick fixes:${NC}"
    echo -e "  • PHP coding standards: ${BLUE}composer lint-fix${NC}"
    echo -e "  • View detailed errors: Review output above"
    echo -e "  • Skip hook (not recommended): ${BLUE}git push --no-verify${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    exit 1
fi
